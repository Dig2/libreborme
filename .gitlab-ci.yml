image: docker:18.09

services:
  - docker:dind

variables:
  CONTAINER_IMAGE: registry.gitlab.com/libreborme/libreborme
  CONTAINER_TEST_IMAGE: $CONTAINER_IMAGE:$CI_BUILD_REF_NAME
  DEPLOY_PATH: /opt/libreborme
  DOCKER_DRIVER: overlay
  DOCKER_HOST: tcp://localhost:2375

  DB_HOST: postgres.libreborme-6554539.svc.cluster.local
  DB_NAME: libreborme
  DB_USER: postgres
  DB_PASS: iul6RBi9DP
  DJANGO_SETTINGS_MODULE: libreborme.settings_ci
  ENV_TYPE: ci
  ELASTICSEARCH_URI: http://elasticsearch.libreborme-6554539.svc.cluster.local:9200

  KUBECONFIG: /etc/deploy/config

stages:
  - build
  - test
  - release
  - deploy


build:
  stage: build
  cache:
    paths:
    - /root/.cache
  tags:
    - kubernetes
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker build -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE
    # - cd docker/nginx && docker build -t registry.gitlab.com/libreborme/libreborme/nginx:$CI_BUILD_REF_NAME .
    # - docker push registry.gitlab.com/libreborme/libreborme/nginx:$CI_BUILD_REF_NAME

test:
  stage: test
  tags:
    - kubernetes
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull $CONTAINER_TEST_IMAGE
    # - docker-compose -f docker-compose.ci.yml -p ci up --abort-on-container-exit
    - docker run $CONTAINER_TEST_IMAGE bash -c "ELASTICSEARCH_URI=$ELASTICSEARCH_URI DB_HOST=$DB_HOST make test_k8s_ci"
  coverage: '/TOTAL.*?(\d{1,2}.\d+%)/'


release_stg:
  stage: release
  tags:
    - kubernetes
  only:
    - staging
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_IMAGE:staging
    - docker push $CONTAINER_IMAGE:staging
    # - docker tag registry.gitlab.com/libreborme/libreborme/nginx:$CI_BUILD_REF_NAME registry.gitlab.com/libreborme/libreborme/nginx:staging
    # - docker push registry.gitlab.com/libreborme/libreborme/nginx:staging


# Usar algo como https://hub.docker.com/r/lwolf/kubectl_deployer/~/dockerfile/
deploy_stg:
  stage: deploy
  tags:
    - kubernetes
  only:
    - staging
  environment:
    name: staging
    url: http://staging.ingress.libreborme.net
  before_script:
    - wget https://storage.googleapis.com/kubernetes-release/release/v1.9.7/bin/linux/amd64/kubectl -P /usr/local/bin/
    - chmod +x /usr/local/bin/kubectl
    - mkdir -p /etc/deploy
    - echo ${kube_config} | base64 -d > ${KUBECONFIG}
    - kubectl config use-context gke_libreborme-staging-test_europe-west1-c_libreborme-staging
  script:
    - kubectl set image deployment/libreborme libreborme=registry.gitlab.com/libreborme/libreborme:staging
    - kubectl rollout status deployment/libreborme

# manual step
# deploy_pro:
#   stage: deploy
#   tags:
#     - kubernetes
#   environment:
#     name: production
#     url: http://production.ingress.libreborme.net
#   before_script:
#     - wget https://storage.googleapis.com/kubernetes-release/release/v1.9.7/bin/linux/amd64/kubectl -P /usr/local/bin/
#     - chmod +x /usr/local/bin/kubectl
#     - mkdir -p /etc/deploy
#     - echo ${kube_config} | base64 -d > ${KUBECONFIG}
#     - kubectl config use-context gke_libreborme-staging-test_europe-west1-c_libreborme-staging
#   script:
#     - kubectl set image deployment/libreborme libreborme=registry.gitlab.com/libreborme/libreborme:staging
#     - kubectl rollout status deployment/libreborme
